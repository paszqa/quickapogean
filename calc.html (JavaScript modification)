function populateTraits() {
    const traitsList = document.getElementById('traits-list');
    let connectors = document.getElementById('connectors');
    connectors.innerHTML = '';
    
    // First pass to create all trait divs
    traits.forEach(trait => {
        const traitDiv = document.createElement('div');
        traitDiv.addEventListener('contextmenu', e => e.preventDefault())
        traitDiv.addEventListener("contextmenu", (event) => {});
        oncontextmenu = (event) => {};
        traitDiv.classList.add('trait');
        if (trait[0] === 0) {
            traitDiv.style.display = 'none';
        }
        traitDiv.setAttribute('data-trait-id', trait[0]);
        
        const traitTitle = document.createElement('div');
        traitTitle.classList.add('trait-title');
        traitTitle.textContent = trait[2]; 
        
        const traitDescription = document.createElement('div');
        traitDescription.classList.add('trait-description');
        traitDescription.textContent = trait[3];
        
        traitDiv.appendChild(traitTitle);
        selectedTraits[trait[0]] = 0;
        traitDiv.appendChild(traitDescription);
        
        const traitStages = document.createElement('div');
        traitStages.classList.add('trait-stages');
        
        // Create the stage buttons
        trait[4].forEach(stage => {
            const button = document.createElement('button');
            button.textContent = stage;
            button.style.pointerEvents = 'none';
            if (stage == 0 || stage == "0%" || stage === "0" || stage === "Off") {
                button.classList.add('active', 'first-stage');
                selectedTraits[trait[0]] = stage;
            }
            traitStages.appendChild(button);
        });
        
        traitDiv.appendChild(traitStages);
        
        // Add click events
        traitDiv.addEventListener('click', function() {
            increaseTraitStage(trait[0], traitStages);
        });
        
        traitDiv.addEventListener('contextmenu', function(e) {
            e.preventDefault();
            decreaseTraitStage(trait[0], traitStages);
        });
        
        const locationMultiplier = 1.8;
        const centerSpot = [400, 450];
        traitDiv.style.position = 'absolute';
        traitDiv.style.left = `${(centerSpot[0] + trait[9])*locationMultiplier}px`;
        traitDiv.style.top = `${(centerSpot[1] + trait[10])*locationMultiplier}px`;
        traitsList.appendChild(traitDiv);
    });
    
    // Second pass to draw connectors
    traits.forEach(trait => {
        if (trait[1] > 0) { // If this trait has a parent
            const parentTrait = traits.find(t => t[0] === trait[1]);
            if (parentTrait) {
                // Calculate positions
                const locationMultiplier = 1.8;
                const centerSpot = [400, 450];
                const traitX = (centerSpot[0] + trait[9]) * locationMultiplier + 70; // Add half of trait width
                const traitY = (centerSpot[1] + trait[10]) * locationMultiplier + 60; // Add half of trait height
                const parentX = (centerSpot[0] + parentTrait[9]) * locationMultiplier + 70;
                const parentY = (centerSpot[1] + parentTrait[10]) * locationMultiplier + 60;
                
                // Create the connector line
                const line = document.createElementNS("http://www.w3.org/2000/svg", "line");
                line.setAttribute("x1", traitX);
                line.setAttribute("y1", traitY);
                line.setAttribute("x2", parentX);
                line.setAttribute("y2", parentY);
                line.setAttribute("stroke", "black");
                line.setAttribute("stroke-width", "2");
                connectors.appendChild(line);
            }
        }
    });
}
